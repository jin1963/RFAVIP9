// js/staking.js
import { tokenToWei, displayWeiToToken, getFriendlyErrorMessage } from './utils.js';
import { updateUI } from './app.js';
import { usdtAddress, vip9Address, contractAddress } from '../config.js';

export async function buyAndStake() {
  if (!window.stakingContract || !window.account || !window.usdtContract || !window.routerContract || typeof window.usdtDecimals === 'undefined' || typeof window.kjcDecimals === 'undefined') {
    alert("‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    console.warn("buyAndStake: Contracts or decimals not initialized yet.");
    return;
  }

  const rawInput = document.getElementById("usdtAmount").value.trim();
  if (!rawInput || isNaN(rawInput) || parseFloat(rawInput) <= 0) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0)");
    return;
  }

  const usdtAmountFloat = parseFloat(rawInput);
  const usdtInWei = tokenToWei(usdtAmountFloat, window.usdtDecimals);

  document.getElementById("buyTokenStatus").innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ VIP9...";
  document.getElementById("buyTokenStatus").classList.remove("error", "success");

  try {
    if (!window.web3.utils.isAddress(usdtAddress) || !window.web3.utils.isAddress(vip9Address)) {
      alert("‚ùå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô config.js");
      document.getElementById("buyTokenStatus").innerText = "‚ùå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
      document.getElementById("buyTokenStatus").classList.add("error");
      return;
    }

    const path = [usdtAddress, vip9Address];
    const amountsOut = await window.routerContract.methods.getAmountsOut(usdtInWei, path).call();
    const expectedOutWei = BigInt(amountsOut[1]);

    const SLIPPAGE_PERCENTAGE = 5;
    const minOut = expectedOutWei * BigInt(100 - SLIPPAGE_PERCENTAGE) / 100n;

    const allowance = await window.usdtContract.methods.allowance(window.account, contractAddress).call();

    if (BigInt(allowance) < BigInt(usdtInWei)) {
      document.getElementById("buyTokenStatus").innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ USDT...";
      const approveTx = await window.usdtContract.methods.approve(contractAddress, usdtInWei).send({ from: window.account });
      alert("‚úÖ ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ USDT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç VIP9' ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      document.getElementById("buyTokenStatus").innerText = "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠";
      document.getElementById("buyTokenStatus").classList.add("success");
      return;
    }

    document.getElementById("buyTokenStatus").innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ Stake...";
    const buyTx = await window.stakingContract.methods.buyAndStake(usdtInWei, minOut.toString()).send({ from: window.account });

    document.getElementById("buyTokenStatus").innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ VIP9...";
    const receipt = await window.web3.eth.getTransactionReceipt(buyTx.transactionHash);

    if (receipt && receipt.status) {
      alert(`‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠ ${usdtAmountFloat} USDT ‡πÅ‡∏•‡∏∞ Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      document.getElementById("buyTokenStatus").innerText = `‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠ ${usdtAmountFloat} USDT ‡πÅ‡∏•‡∏∞ Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`;
      document.getElementById("buyTokenStatus").classList.add("success");
      updateUI();
    } else {
      alert("‚ùå ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò");
      document.getElementById("buyTokenStatus").innerText = "‚ùå ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ VIP9 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!";
      document.getElementById("buyTokenStatus").classList.add("error");
    }

  } catch (e) {
    console.error("buyAndStake: Error:", e);
    const errorMessage = getFriendlyErrorMessage(e);
    document.getElementById("buyTokenStatus").innerText = `‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`;
    document.getElementById("buyTokenStatus").classList.add("error");
    alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç: ${errorMessage}`);
  }
}

export async function loadStakingInfo() {
  if (!window.stakingContract || !window.account || typeof window.kjcDecimals === 'undefined') {
    document.getElementById("yourStake").innerText = "‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";
    document.getElementById("yourStakingReward").innerText = "‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";
    console.warn("loadStakingInfo: Contracts or decimals not initialized.");
    return;
  }

  try {
    const rawStakedAmount = await window.stakingContract.methods.stakedAmount(window.account).call();
    const stakingReward = await window.stakingContract.methods.getClaimable(window.account).call();

    const stakeDisplay = displayWeiToToken(rawStakedAmount, window.kjcDecimals);
    const stakingRewardDisplay = displayWeiToToken(stakingReward, window.kjcDecimals);

    document.getElementById("yourStake").innerText = `üí∞ Your Stake: ${stakeDisplay} VIP9`;
    document.getElementById("yourStakingReward").innerText = `üéâ Claimable Stake Reward: ${stakingRewardDisplay} VIP9`;

  } catch (e) {
    console.error("loadStakingInfo: Error:", e);
    document.getElementById("yourStake").innerText = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + (e.message || "Unknown error");
    document.getElementById("yourStake").classList.add("error");
    document.getElementById("yourStakingReward").innerText = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + (e.message || "Unknown error");
    document.getElementById("yourStakingReward").classList.add("error");
  }
}

export async function claimStakingReward() {
  if (!window.stakingContract || !window.account) {
    document.getElementById("claimStakeStatus").innerText = "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡πà‡∏≠‡∏ô";
    return;
  }

  document.getElementById("claimStakeStatus").innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Stake...";
  document.getElementById("claimStakeStatus").classList.remove("error", "success");

  try {
    const lastClaimTime = await window.stakingContract.methods.lastClaim(window.account).call();
    const claimInterval = await window.stakingContract.methods.CLAIM_INTERVAL().call();
    const now = Math.floor(Date.now() / 1000);
    const nextClaimTime = Number(lastClaimTime) + Number(claimInterval);

    if (now >= nextClaimTime) {
      const tx = await window.stakingContract.methods.claimStakingReward().send({ from: window.account });
      const receipt = await window.web3.eth.getTransactionReceipt(tx.transactionHash);

      if (receipt && receipt.status) {
        alert("üéâ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
        document.getElementById("claimStakeStatus").innerText = "üéâ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!";
        document.getElementById("claimStakeStatus").classList.add("success");
        updateUI();
      } else {
        alert("‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        document.getElementById("claimStakeStatus").innerText = "‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!";
        document.getElementById("claimStakeStatus").classList.add("error");
      }
    } else {
      const remainingSeconds = nextClaimTime - now;
      const waitMinutes = Math.ceil(remainingSeconds / 60);
      const waitHours = Math.floor(waitMinutes / 60);
      const remainingMins = waitMinutes % 60;
      let waitString = "";
      if (waitHours > 0) waitString += `${waitHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á `;
      if (remainingMins > 0 || waitHours === 0) waitString += `${remainingMins} ‡∏ô‡∏≤‡∏ó‡∏µ`;
      document.getElementById("claimStakeStatus").innerText = `‚è≥ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${waitString}`;
    }
  } catch (e) {
    const errorMessage = getFriendlyErrorMessage(e);
    document.getElementById("claimStakeStatus").innerText = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`;
    document.getElementById("claimStakeStatus").classList.add("error");
    alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${errorMessage}`);
  }
}
